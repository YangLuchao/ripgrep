# 包的元数据
[package]
name = "ripgrep"   # 包名
version = "13.0.0" # 版本号
# 作者列表
authors = ["Andrew Gallant <jamslam@gmail.com>"]
# 描述
description = """
ripgrep is a line-oriented search tool that recursively searches the current
directory for a regex pattern while respecting gitignore rules. ripgrep has
first class support on Windows, macOS and Linux.
"""
# 文档链接
documentation = "https://github.com/BurntSushi/ripgrep"
# 主页链接
homepage = "https://github.com/BurntSushi/ripgrep"
# 代码仓库链接
repository = "https://github.com/BurntSushi/ripgrep"
# 关键词
keywords = ["regex", "grep", "egrep", "search", "pattern"]
# 类别
categories = ["command-line-utilities", "text-processing"]
# 许可证
license = "Unlicense OR MIT"
# 排除文件
exclude = [
  "HomebrewFormula",
  "/.github/",
  "/ci/",
  "/pkg/",
  "/benchsuite/",
  "/scripts/",
]
# 构建文件
build = "build.rs"
# 是否运行自动测试
autotests = false
# edition标签用于指定Rust编程语言的版本
edition = "2018"
# 使用的 Rust 版本
rust-version = "1.70"

# 可执行文件列表
[[bin]]
bench = false
path = "crates/core/main.rs"
name = "rg"

# 测试配置
[[test]]
name = "integration"
path = "tests/tests.rs"

# 工作空间配置
[workspace]
members = [
  "crates/globset",
  "crates/grep",
  "crates/cli",
  "crates/matcher",
  "crates/pcre2",
  "crates/printer",
  "crates/regex",
  "crates/searcher",
  "crates/ignore",
]


# 依赖列表
[dependencies]
# 处理二进制字符串（Byte String）的库
bstr = "1.6.0"
# 用于文本搜索和匹配的库
# grep 库被指定为一个本地路径中的子目录作为依赖项，其路径为 crates/grep
grep = { version = "0.2.12", path = "crates/grep" }
# 用于忽略文件和目录的库
ignore = { version = "0.4.19", path = "crates/ignore" }
# 用于创建静态全局变量的库
lazy_static = "1.1.0"
# 用于日志记录的库
log = "0.4.5"
# 用于 JSON 序列化和反序列化的库
serde_json = "1.0.23"
# 用于在终端输出彩色文本的库
termcolor = "1.1.0"
# 指定clap库的特性
# 用于解析命令行参数的 Rust 库
[dependencies.clap]
version = "2.33.0"
# default-features 标签用于指定是否启用依赖项的默认功能特性。
# 默认情况下，当你在 Cargo.toml 文件中声明一个依赖项时，Cargo 会自动启用该依赖项的默认功能特性。
# 通过设置 default-features = false，你可以禁用依赖项的默认功能特性
default-features = false
# features 标签用于指定要启用或禁用的特定功能特性。依赖项可能提供多个功能特性，你可以在 features 标签中列出要启用的特性，以逗号分隔。
features = ["suggestions"]

# 指定特定条件下的依赖
[target.'cfg(all(target_env = "musl", target_pointer_width = "64"))'.dependencies.jemallocator]
version = "0.5.0"

# 构建时依赖列表
[build-dependencies]
lazy_static = "1.1.0"

[build-dependencies.clap]
version = "2.33.0"
default-features = false
features = ["suggestions"]

# 开发环境依赖列表
[dev-dependencies]
serde = "1.0.77"
serde_derive = "1.0.77"
walkdir = "2"

# 特性列表
[features]
# 指定了名为 simd-accel 的自定义特性，并将其映射到 grep/simd-accel
simd-accel = ["grep/simd-accel"]
# 指定了名为 pcre2 的自定义特性，并将其映射到 grep/pcre2
pcre2 = ["grep/pcre2"]

# 发布配置
[profile.release]
# debug 选项的值为 1，表示在发布构建中启用了调试信息
debug = 1

# 包的元数据 (Debian 软件包)
[package.metadata.deb]
features = ["pcre2"]
section = "utils"
assets = [
  [
    "target/release/rg",
    "usr/bin/",
    "755",
  ],
  [
    "COPYING",
    "usr/share/doc/ripgrep/",
    "644",
  ],
  [
    "LICENSE-MIT",
    "usr/share/doc/ripgrep/",
    "644",
  ],
  [
    "UNLICENSE",
    "usr/share/doc/ripgrep/",
    "644",
  ],
  [
    "CHANGELOG.md",
    "usr/share/doc/ripgrep/CHANGELOG",
    "644",
  ],
  [
    "README.md",
    "usr/share/doc/ripgrep/README",
    "644",
  ],
  [
    "FAQ.md",
    "usr/share/doc/ripgrep/FAQ",
    "644",
  ],
  # man 手册页面由 ripgrep 的构建过程自动生成，因此实际上没有提交此文件。
  # 若要创建 dpkg，请创建 deployment/deb 目录并将 man 手册页面复制到该目录，
  # 或使用 'ci/build-deb' 脚本。
  [
    "deployment/deb/rg.1",
    "usr/share/man/man1/rg.1",
    "644",
  ],
  # shell 补全也是类似的情况。
  [
    "deployment/deb/rg.bash",
    "usr/share/bash-completion/completions/rg",
    "644",
  ],
  [
    "deployment/deb/rg.fish",
    "usr/share/fish/vendor_completions.d/rg.fish",
    "644",
  ],
  [
    "deployment/deb/_rg",
    "usr/share/zsh/vendor-completions/",
    "644",
  ],
]
extended-description = """\
ripgrep (rg) recursively searches your current directory for a regex pattern.
By default, ripgrep will respect your .gitignore and automatically skip hidden
files/directories and binary files.
"""
